/**
 * \file bowling.h
 * \brief Bowling Score Calculation.
 * \author Brahim Yahiaoui
 * \version 1.0
 * \date 12 december 2021
 *
 * Declaration of elements to calculate score of a bowler.
 *
 */

#ifndef __BOWLING_H__
#define __BOWLING_H__

#include <vector>
#include <list>
#include <string>

// Total number of the frames used of a line
#define NBR_OF_FRAME    10
#define SYMBOL_STRIKE   'X'
#define SYMBOL_SPARE    '/'
#define SYMBOL_MISS     '-'

using namespace std;

/**
* All possible events when a bowler plays his turn
*/
enum class EEvent
{
    strike = -2,  // all pins knocked in first try
    spare,  // all pins knocked in tow tries
    miss,   // no pins knocked
    one, two, three, four, five, six, seven, eight, nine, // Other cases
    numberOfPins
};

/**
* Define one frame in a line
*/
class CFrame
{
private:

    // Fields
    /** To ckech if frame is finished */
    bool m_IsFinished;
    /** Score obtrained in this frame */
    unsigned int m_Score;
    /** Position of frame between 0 and NBR_OF_FRAME - 1 */
    unsigned int m_FrameNumber;
    /** Roll number in this frame */
    unsigned int m_NumberOfRolls;
    /** Envents in this frame */
    vector<EEvent>* m_Events;
    /** Previous frame */
    CFrame* m_PreviousFrame;

    // Methods
    /** Update previous frames if it's necessary */
    void UpdatePreviousFrames();

public:

    // Constructors & Destructors
    /**
    * Construtor of the CFrame Objects
    * \param prmFrameNumber Frame number
    */
    CFrame(unsigned int prmFrameNumber = 0);
    /** Destrutor of the CFrame Objects */
    virtual ~CFrame();

    // Methods
    /**
    * Get position of this frame
    * \return Current score
    */
    unsigned int GetFrameNumber() { return m_FrameNumber; };
    /**
    * Get current score of this frame
    * \return Current score
    */
    unsigned int GetScore() { return m_Score; };
    /**
    * If it's needed (strike, spare), set previous frame
    * \param prmPreviousFrame Pointer of the previous frame
    */
    void SetPreviousFrame(CFrame* prmPreviousFrame) { m_PreviousFrame = prmPreviousFrame; };
    /**
    * Gheck if this frame is finished
    * \return True if is finished
    */
    bool IsFinished() { return m_IsFinished; };
    /**
    * Check if the frame contains spare event
    * \return True if frame spare event
    */
    bool IsSpare();
    /**
    * Check if the frame contains strike
    * \return True if frame contains strike event
    */
    bool IsStrike();
    /**
    * Calculate score of this frame and eventually update previous frames
    * \param prmNumberOfPinsDown Number of pins knocked down
    * \return Symbole for the result
    */
    char ComputeScore(unsigned int prmNumberOfPinsDown);

};

/** Define a Bowler */
class CBowler
{
private:

    // Fields
    /** Last id generated by increment */
    static unsigned int LastId;
    /** Unique id of the bowler */
    unsigned int m_Id;
    /** Name of the bowler */
    string m_Name;
    /** Contains the evolution during the game */
    list<CFrame*>* m_Frames;
    /** Current iterator in m_Frames */
    list<CFrame*>::iterator m_CurrentFrame;
    /** Current result with the symbols "X" strike, "/" spare, "-" miss */
    string m_LineResult;

public:

    // Constructors & Destructors
    /**
    * Construtor of the CFrame Objects
    * \param prmName Bowler name
    */
    CBowler(string prmName = "Anonymous");
    /** Destrutor of the CFrame Objects */
    virtual ~CBowler();

    // Methods
    /**
    * Get the last line result
    * \return Current line result of the bowler
    */
    string GetLastResult() { return m_LineResult; };
    /**
    * Calculate the total last score
    * \return Current score of the bowler
    */
    unsigned int CalculateLastScore() ;
    /**
    * Compute last knocked pins
    * \param prmNumberOfPinsDown Number of pins knocked down
    */
    void ComputeLastLaunch(unsigned int prmNumberOfPinsDown);

};

#endif // __BOWLING_H__
